# Use the root user instead of nginx
user  root;
worker_processes auto;

# error log and process ID
error_log  /var/log/nginx/error.log;
pid        /var/run/nginx.pid;

# The "events" section is required by Nginx
events {
    worker_connections 1024;
}

# HTTP server configuration
http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout  65;

    # Increase types_hash sizes to avoid warnings
    types_hash_max_size 4096;
    types_hash_bucket_size 128;

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;

    upstream backend {
        server flask_app:7443;  # Using HTTPS port
    }

    upstream frontend {
        server angular_app:6443;  # Using HTTPS port
    }

    server {
        listen 80;
        server_name flask.example.com;

        # This location is used for Certbot challenge verification
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        location / {
            return 301 https://$host$request_uri;
        }

        # Optional: Configure logging (uncomment if needed)
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;
    }

    server {
        listen 80;
        server_name angular.example.com;

        # This location is used for Certbot challenge verification
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        location / {
            return 301 https://$host$request_uri;
        }

        # Optional: Configure logging (uncomment if needed)
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;
    }

    server {
        listen 443 ssl;
        server_name flask.example.com;

        # Use Cloudflare Origin Certificate for internal communication (Cloudflare to EC2)
        ssl_certificate /etc/nginx/ssl/origin.pem;
        ssl_certificate_key /etc/nginx/ssl/origin.key;

        # Use Let's Encrypt certificates for external traffic (Browser to EC2)
        ssl_certificate /etc/letsencrypt/live/flask.example.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/flask.example.com/privkey.pem;

        location / {
            proxy_pass https://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Enable Gzip compression for better performance
        gzip on;
        gzip_types text/plain application/javascript text/css application/json;
        gzip_min_length 256;

        # Optional: Configure logging (uncomment if needed)
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;
    }

    server {
        listen 443 ssl;
        server_name angular.example.com;

        # Use Cloudflare Origin Certificate for internal communication (Cloudflare to EC2)
        ssl_certificate /etc/nginx/ssl/origin.pem;
        ssl_certificate_key /etc/nginx/ssl/origin.key;

        # Use Let's Encrypt certificates for external traffic (Browser to EC2)
        ssl_certificate /etc/letsencrypt/live/angular.example.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/angular.example.com/privkey.pem;

        location / {
            proxy_pass https://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Enable Gzip compression for better performance
        gzip on;
        gzip_types text/plain application/javascript text/css application/json;
        gzip_min_length 256;

        # Optional: Configure logging (uncomment if needed)
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;
    }
}